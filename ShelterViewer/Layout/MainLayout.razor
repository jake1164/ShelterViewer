@inherits LayoutComponentBase
@inject Services.VaultService VaultService
@inject HttpClient Http

<MudThemeProvider/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        @if (VaultService.IsVaultEmpty())
        {
            <span>Fallout Shelter Viewer</span>
        } else
        {
            <span>Fallout Shelter @VaultService.Name</span>
        }

        <MudSpacer/>
        @if(!VaultService.IsVaultEmpty())
        {
            <MudText Style="padding-right: 20px;">@VaultService.Caps Caps</MudText>
            <MudText>@VaultService.Quantums Nuka Quantums</MudText>
        }
        
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen">
        <NavMenu/>
        <MudSpacer />
        <MudText Align="Align.Center">Version: @version </MudText>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;
    private string version = "dev";

    protected override async Task OnInitializedAsync()
    {
        VaultService.OnVaultChanged += async () => await InvokeAsync(StateHasChanged);

        try
        {
            var vJson = await Http.GetFromJsonAsync<Dictionary<string, string>>(".version");
            version = vJson["version"];
        }
        catch (Exception ex) { }

    }


    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}