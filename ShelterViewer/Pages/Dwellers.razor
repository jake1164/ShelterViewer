@page "/dwellers"
@using ShelterViewer.Components.Dwellers
@using ShelterViewer.Models
@using Services
@inject Services.VaultService VaultService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<h3>Dwellers</h3>

<MudDataGrid T="Dweller" Items="DwellerList" Filterable="true" >
    <Columns>
       
        <PropertyColumn Property="x => x.name" Title="Name" />
        <PropertyColumn Property="x => x.lastName" Title="Last Name" />
        <!-- Theme Rarity?  add icon? 
        <PropertyColumn Property="x => x.rarity" Title="Rarity" />
        -->
        <PropertyColumn Property="x => x.experience.currentLevel" Title="Level" />

        <TemplateColumn Sortable="true" SortBy="x => x.health.healthValue" T="Dweller" Title="Health">
            <CellTemplate>
                <Health DwellerHealth="@context.Item.health" />
            </CellTemplate>
        </TemplateColumn>        
        <TemplateColumn Title="S.P.E.C.I.A.L" CellClass="special" >
            <CellTemplate>
                <Special Stats="@context.Item.stats" />
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x =>GetRoomName(x.savedRoom)" Title="Room" />
        <TemplateColumn T="Dweller" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudStack Row>
                    <MudButton Size="@Size.Small" 
                        Variant="@Variant.Filled" 
                        Color="@Color.Primary" 
                        OnClick="() => ShowDweller(context.Item)">View</MudButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Dweller" />
    </PagerContent>
</MudDataGrid>

<style>
    .rtl-progress .mud-progress-linear-bar {
        transform: scaleX(-1);
    }
    .mud-tooltip-root.mud-tooltip-inline {
        display: unset;
        width: 100%;
    }
    .special {
        padding: 5px 0 0 0;
        height: 65px;
    }
</style>
@code {
    List<Dweller> DwellerList { get; set; } = new();    
    Dweller? selectedDweller;

    protected override void OnInitialized()
    {
        if(VaultService.IsVaultEmpty())
        {
            NavigationManager.NavigateTo("/");
        }

        DwellerList = VaultService.Dwellers;
    }

    private System.Threading.Tasks.Task ShowDweller(Dweller selected)
    {
        selectedDweller = selected;

        var options = new DialogOptions() { MaxWidth = MaxWidth.Large, FullWidth = true };
        var parameters = new DialogParameters<DwellerInfo_Dialog>
        {
            { "Dweller", selectedDweller }
        };
        return DialogService.ShowAsync<DwellerInfo_Dialog>("Dweller Info", parameters, options);
    }

    private string GetRoomName(int roomNumber)
    {
        var room = VaultService.GetRoom(roomNumber);
        return room?.type ?? "Coffee Break";
    }
}
