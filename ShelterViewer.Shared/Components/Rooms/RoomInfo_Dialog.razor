@using ShelterViewer.Shared.Components.Dwellers

@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        <MudCard>
            <MudCardContent>
                <!-- Split card into two sides -->
                <MudGrid>
                    <MudItem xs="6">
                        <MudText>Room Name: @(Room.Name ?? "N/A")</MudText>
                        <MudText>Room Trait: @(Room.Trait ?? "N/A")</MudText>
                        <MudText>Emergency Done: @Room.emergencyDone</MudText>
                        <MudText>Type of Room: @Room.type</MudText>
                        <MudText>Class of Room: @Room._class</MudText>
                        <MudText>Merge Level: @Room.mergeLevel</MudText>
                        <MudText>Row Position: @Room.row</MudText>
                        <MudText>Column Position: @Room.col</MudText>
                        <MudText>Power Status: @Room.power</MudText>
                        <MudText>Damage Value: @(Room.roomHealth?.damageValue ?? 0)</MudText>
                        <MudText>Initial Health Value: @(Room.roomHealth?.initialValue ?? 0)</MudText>
                        <MudText>Mr Handy List: @(Room.mrHandyList != null ? string.Join(", ", Room.mrHandyList) : "None")</MudText>
                        <MudText>Rush Task ID: @Room.rushTask</MudText>
                        <MudText>Level: @Room.level</MudText>
                        <MudText>Dweller IDs: @(Room.DwellerIds != null ? string.Join(", ", Room.DwellerIds) : "None")</MudText>
                        <MudText>Dead Dweller IDs: @(Room.deadDwellers != null ? string.Join(", ", Room.deadDwellers) : "None")</MudText>
                        <MudText>Current State Name: @(Room.currentStateName ?? "N/A")</MudText>
                        <MudText>Current State Task ID: @(Room.currentState?.taskId ?? 0)</MudText>
                        <MudText>Current State Notification ID: @(Room.currentState?.notificationId ?? "N/A")</MudText>
                        <MudText>Current State Remaining Time: @(Room.currentState?.remainingTime ?? 0)</MudText>
                        <MudText>Current State Estimated Time: @(Room.currentState?.estimatedTime ?? 0)</MudText>
                        <MudText>Deserialize ID: @Room.deserializeID</MudText>
                        <MudText>Assigned Decoration: @(Room.assignedDecoration ?? "None")</MudText>
                        <MudText>Visibility Status: @Room.roomVisibility</MudText>
                        <MudText>Outline Status: @Room.roomOutline</MudText>
                        <MudText>Broken Status: @Room.broken</MudText>
                        <MudText>Contains Hole: @Room.withHole</MudText>
                        <MudText>Children Count: @(Room.children?.Length ?? 0)</MudText>
                        <MudText>Partners Count: @(Room.partners?.Length ?? 0)</MudText>
                        <MudText>Storage Resources: @(Room.storage?.resources != null ? Room.storage.resources.ToString() : "N/A")</MudText>
                        <MudText>Storage Bonus: @(Room.storage?.bonus != null ? Room.storage.bonus.ToString() : "N/A")</MudText>
                        <MudText>Production Cycles Completed: @Room.numberOfProductionCycle</MudText>
                        <MudText>Experience Reward Pending: @Room.ExperienceRewardIsDirty</MudText>
                        <MudText>Ingredient Item IDs: @(Room.IngredientItemIds != null ? string.Join(", ", Room.IngredientItemIds) : "None")</MudText>
                        <MudText>Crafting Item ID: @(Room.CraftingItemId ?? "N/A")</MudText>
                        <MudText>Completion Time: @Room.CompletedTime</MudText>
                        <MudText>Slots Count: @(Room.slots?.Length ?? 0)</MudText>
                        <MudText>Dwellers Pending Training: @(Room.dwellerWithPendingCompleteTraining != null ? string.Join(", ", Room.dwellerWithPendingCompleteTraining) : "None")</MudText>
                        <MudText>New Dweller Ready: @Room.newDwellerReady</MudText>
                        <MudText>Only Increases Happiness: @Room.onlyIncreaseHappiness</MudText>

                        <MudText>Room Level: @(Room.Level ?? 0)</MudText>

                        <MudText>Size: @(Room.Size != null ? string.Join(", ", Room.Size) : "N/A")</MudText>
                        <MudText>Output Type: @(Room.OutputType != null ? string.Join(", ", Room.OutputType) : "N/A")</MudText>
                        <MudText>Output: @(Room.Output != null ? string.Join(", ", Room.Output) : "N/A")</MudText>
                        <MudText>Storage Capacity: @(Room.StorageCapacity != null ? Room.StorageCapacity : "N/A")</MudText>
                        <MudText>Dweller Capacity: @(Room.DwellerCapacity != null ? Room.DwellerCapacity : "N/A")</MudText>
                        <MudText>Power Per Minute: @(Room.PowerPerMin != null ? Room.PowerPerMin : "N/A")</MudText>
                        <MudText>Max Room Speed: @(Room.MaxRoomSpeed != null ? Room.MaxRoomSpeed : "N/A")</MudText>
                        <MudText>Max Room Speed Adjusted: @(Room.MaxRoomSpeedWithMod != null ? Room.MaxRoomSpeedWithMod : "N/A")</MudText>
                        <MudText>Current Room Speed: @(Room.CurrentRoomSpeed != null ? Room.CurrentRoomSpeed : "N/A")</MudText>
                        <MudText>Current Room Speed Adjusted: @(Room.CurrentRoomSpeedWithMod != null ? Room.CurrentRoomSpeedWithMod : "N/A")</MudText>
                    </MudItem>
                    <MudItem xs="6">
                                <MudText Typo="Typo.h3">Dwellers:</MudText>
                                @if (Room.Dwellers != null)
                                {
                                    @foreach (var dweller in Room.Dwellers)
                                    {
                                        <MudText>@dweller.Name
                                            <MudButton OnClick="() => ShowDwellerInfo(dweller)">View Info</MudButton>
                                        </MudText>
                                    }
                                }
                                else
                                {
                                    <MudText>No Dwellers</MudText>
                                }
                    </MudItem>
                </MudGrid>
                </MudCardContent>
                    <MudCardActions>
                        <MudButton Color="Color.Primary">Previous</MudButton>
                        <MudButton Color="Color.Primary">Next</MudButton>
                    </MudCardActions>
                </MudCard>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseDialog" Variant="Variant.Filled">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter, EditorRequired]
    private MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter, EditorRequired]
    public Room Room { get; set; } = null!;

    private void CloseDialog() => MudDialog.Close(DialogResult.Ok(true));

    private Task ShowDwellerInfo(Dweller dweller)
    {
        var options = new DialogOptions() { MaxWidth = MaxWidth.Large, FullWidth = true };
        var parameters = new DialogParameters<DwellerInfo_Dialog>
        {
            { "DwellerId", dweller.serializeId },
            { "Dwellers", Room.Dwellers }
        };
        return DialogService.ShowAsync<DwellerInfo_Dialog>("Dweller Info", parameters, options);
    }
}

